from collections.abc import Mapping as ABC_Mapping
from typing import Iterable, Iterator, List, Union, Sequence

class ArrowException(Exception): ...
class ArrowKeyError(ArrowException): ...

class Buffer:
    def to_pybytes(self) -> bytes: ...
    address: int
    is_cpu: bool
    is_mutable: bool
    parent: Buffer
    size: int

class Mapping: ...
class Metadata(): ...

class Schema:
    def with_metadata(self, metadata: dict) -> Schema: ...
    metadata: dict
    names: List[str]

class RecordBatch:
    @classmethod
    def from_pydict(cls, mapping: Union[dict, Mapping], schema: Schema = None,
                    metadata: Union[dict, Mapping] = None) -> RecordBatch: ...
    def __len__(self) -> int: ...
    def replace_schema_metadata(self, metadata: dict = None) -> RecordBatch: ...
    def to_pydict(self) -> dict: ...

    nbytes: int
    num_columns: int
    num_rows: int
    schema: Schema

class Table:
    @classmethod
    def from_pydict(cls, mapping: dict, schema: Schema = None,
                    metadata: Union[dict, Mapping] = None) -> Table: ...
    @classmethod
    def from_batches(cls, batches: Union[Sequence[RecordBatch],
                                         Iterator[RecordBatch]],
                     schema: Schema = None) -> Table: ...
    def __len__(self) -> int: ...
    def replace_schema_metadata(self, metadata: dict = None) -> Table: ...
    def slice(self, offset: int = 0, length: int = None) -> Table: ...
    def to_batches(self, max_chunksize: int = None,
                   kwargs: dict = None) -> list[RecordBatch]: ...
    def to_pydict(self) -> dict: ...

    nbytes: int
    num_columns: int
    num_rows: int
    schema: Schema

